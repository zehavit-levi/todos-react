{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/NewTodoInput/NewTodoInput.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","useState","addButton","setAddButton","Row","className","onMouseOver","onMouseOut","Form","Check","todo","completed","type","checked","onChange","handleChangeProps","id","label","title","value","onClick","deleteTodoProps","alert","TodoList","ListGroup","variant","todos","map","ListGroupItem","NewTodoInput","newTodo","setNewTodo","onSubmit","e","preventDefault","addTodoProps","handleSubmit","Control","placeholder","target","handleChangeNewTodo","App","setTodos","opensTodos","setOpensTodos","filter","setFilter","Container","concat","Math","random","toString","substr","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27f98f9f.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Form, Row } from \"react-bootstrap\";\r\nimport './TodoItem.css'\r\nexport default function TodoItem(props) {\r\n    const [addButton, setAddButton] = useState();\r\n    return (\r\n        <Row className=\"todoitem-row\" onMouseOver={() => setAddButton(true)} onMouseOut={() => setAddButton(false)}>\r\n            <Form.Check className={props.todo.completed ? \"todoItem-checkbox checked\" : \"todoItem-checkbox col-10 \"}\r\n                type=\"checkbox\"\r\n                checked={props.todo.completed}\r\n                onChange={() => props.handleChangeProps(props.todo.id)}\r\n                label={props.todo.title}>\r\n            </Form.Check>\r\n            <button value={addButton} className={addButton? \"delete-todoItem-btn visible\" : \"delete-todoItem-btn hidden\"} \r\n            onClick={() => {\r\n                props.deleteTodoProps(props.todo.id)\r\n                if(!props.todo.completed)alert(\"Give attention! you going to delete uncompleted todo. are you sure?\")}}>x</button>\r\n\r\n        </Row>\r\n    )\r\n}","import { ListGroup, ListGroupItem } from \"react-bootstrap\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\n\r\nexport default function TodoList(props) {\r\n\r\n\r\n    return (\r\n        <ListGroup variant=\"flush\">\r\n           {props.todos.map(todo =>  <ListGroupItem key={todo.id}><TodoItem todo={todo} key={todo.id} handleChangeProps={props.handleChangeProps} deleteTodoProps={props.deleteTodoProps}></TodoItem></ListGroupItem>)}\r\n        </ListGroup>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport './NewTodoInput.css';\r\n\r\nexport default function NewTodoInput(props) {\r\n    const [newTodo, setNewTodo] = useState(\"\");\r\n    const handleSubmit = (e, props) => {\r\n        e.preventDefault();\r\n        props.addTodoProps(newTodo);\r\n        setNewTodo(\"\");\r\n    }\r\n\r\n    const handleChangeNewTodo = (e) => {\r\n        e.preventDefault();\r\n        setNewTodo(e.target.value);\r\n    }\r\n    return (\r\n        <Form className=\"todo-form\" onSubmit={(e) => handleSubmit(e, props)}>\r\n            <Form.Control type=\"text\" placeholder=\"What's next?\" value={newTodo} onChange={(e) => handleChangeNewTodo(e)} />\r\n        </Form>\r\n    )\r\n}","import './App.css';\nimport { Alert, Button, Container, ModalBody, ModalDialog, ModalFooter, ModalTitle, Row } from 'react-bootstrap';\nimport { useState } from 'react';\nimport TodoList from './components/TodoList/TodoList';\nimport NewTodoInput from './components/NewTodoInput/NewTodoInput';\nimport { Modal } from 'bootstrap';\nimport ModalHeader from 'react-bootstrap/esm/ModalHeader';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [opensTodos, setOpensTodos] = useState(0);\n  const [filter, setFilter] = useState(\"All\");\n  const [showAlert, setShowAlert] = useState(false);\n\n  const addTodoItem = title => {\n    setTodos(todos.concat({ \"title\": title, \"id\": '_' + Math.random().toString(36).substr(2, 9), \"completed\": false }));\n    setOpensTodos(opensTodos + 1);\n  };\n\n  const handleChange = id => {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        if (todo.completed) setOpensTodos(opensTodos + 1);\n        else (setOpensTodos(opensTodos - 1));\n        return {\n          ...todo,\n          completed: !todo.completed\n        }\n      }\n      return todo\n    }\n    ))\n  };\n\n  const deleteTodo = id => {\n    for (const todo of todos) {\n      if (todo.id === id && !todo.completed) {\n        setOpensTodos(opensTodos - 1);\n      }\n    }\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n\n\n  return (\n    <Container className=\"app-todos\">\n      <h1 className=\"header-todo\">Todos</h1>\n      <NewTodoInput addTodoProps={addTodoItem} />\n      {\n        todos.length > 0 ?\n          <div>\n            <TodoList\n              todos={filter === \"All\" ? todos\n                : filter === \"Completed\" ? todos.filter(todo => todo.completed)\n                  : todos.filter(todo => !todo.completed)\n              }\n              setTodos={setTodos}\n              handleChangeProps={handleChange}\n              deleteTodoProps={deleteTodo} />\n            <Row className=\"bottom-row\">\n              <div className=\"open-todos\">{opensTodos} items left</div>\n              <div className=\"button-container\">\n                <button className={filter === \"All\" ? \"button-filter marked\" : \"button-filter\"} onClick={() => setFilter(\"All\")}>All</button>\n                <button className={filter === \"Active\" ? \"button-filter marked\" : \"button-filter\"} onClick={() => setFilter(\"Active\")}>Active</button>\n                <button className={filter === \"Completed\" ? \"button-filter marked\" : \"button-filter\"} onClick={() => setFilter(\"Completed\")}>Completed</button>\n              </div>\n            </Row>\n          </div> : \"\"\n      }\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}